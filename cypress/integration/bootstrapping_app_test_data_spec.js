// This recipe shows you how to modify bootstrapped data before
// it's sent to your application during startup.
//
// By modifying bootstrapped data you could force your application
// to use different configuration only when running under Cypress.
//
// Let's look at some different strategies based on how our app works

describe("Bootstrapping App Test Data", function(){

  // bootstrap.html is an html file generated by our node server
  // with the seed data inlined
  context("example #1: bootstrap.html", function(){

    it("works by default using development bootstrap data", function(){
      // dont modify anything, let's just test that the normal
      // way of development data seeding works.
      cy
        .visit("http://localhost:8081/bootstrap.html")
        .get("pre")
        .invoke("text")
        .should("eq", JSON.stringify({
          env: "development",
          api: "https://api.company.com"
        }))
    })

    it("can modify window._bootstrappedData", function(){
      // in this example we use cy.visit({onBeforeLoad: ...})
      // to modify the window._bootstrappedData global so that
      // is passed into our App.start() method

      const data = {
        env: "test",
        api: "https://test-api.company.com"
      }

      cy
        .visit("http://localhost:8081/bootstrap.html", {
          onBeforeLoad: (win) => {
            win._bootstrappedData = data
          }
        })
        .get("pre")
        .invoke("text")
        .should("eq", JSON.stringify(data))
    })
  })

  // xhr.html is an html file generated by our node server
  // that makes an XHR request for the initial seed data
  context("example #2: xhr.html", function(){

    it("works by default using development bootstrap data", function(){
      // dont modify anything, let's just test that the normal
      // way of development data seeding works.
      cy
        .visit("http://localhost:8081/xhr.html")
        .get("pre")
        .invoke("text")
        .should("eq", JSON.stringify({
          env: "development",
          api: "https://api.company.com"
        }))
    })

    it("can modify the seed data by stubbing the XHR", function(){
      cy
        // go grab the fixture data so
        // we can DRY up this test
        // and store our test bootstrap data
        // as a fixture
        .fixture("bootstrap.json")
        .then((data) => {
          cy
            .server()
            .route("GET", "/data.json", data)
            .visit("http://localhost:8081/xhr.html")
            .get("pre")
            .invoke("text")
            .should("eq", JSON.stringify(data))
        })
    })

    it("waits for the XHR before asserting", function(){
      // In our very simple local example above the XHR happens
      // so fast that we don't need to explictly wait on it
      //
      // However these two previous examples should both probably wait
      // on the XHR used an aliased route
      //
      // This insulates you from making assertions prior to the data
      // coming in

      cy
        .fixture("bootstrap.json")
        .then((data) => {
          cy
            .server()
            .route({
              delay: 2000, // simulate a slow XHR request
              url: "/data.json",
              response: data
            })
            .as("getData")
            .visit("http://localhost:8081/xhr.html")
            .wait("@getData")
            .get("pre")
            .invoke("text")
            .should("eq", JSON.stringify(data))
        })
    })
  })
})